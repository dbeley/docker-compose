# Rename this to docker-compose.yml

# Run options:
# 1. Use prebuilt images:
#   run cmd: docker-compose up -d
# 2. Build images on your own machine:
#   build cmd: COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build
#   run cmd: docker-compose up -d

version: '2.1'
services:
  proxy:
    image: reallibrephotos/librephotos-proxy:dev
    tty: true
    container_name: librephotos-proxy
    restart: always
    ports:
      - "3000:80"
  librephotos-db:
    image: postgres
    container_name: librephotos-db
    restart: always
    environment:
    # This db password is internal, you can change it if you want, but also change it in librephotos-backend container
      - POSTGRES_USER=docker
      - POSTGRES_PASSWORD=$DB_PASSWORD
      - POSTGRES_DB=ownphotos
    volumes:
      - $HOME/librephotos_data:/var/lib/postgresql/data
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ownphotos -U docker"]
      interval: 5s
      timeout: 5s
      retries: 5
  frontend:
    image: reallibrephotos/librephotos-frontend:dev
    # For development uncomment the "build" line below and comment the "image" line above
    # build: ../librephotos-frontend
    container_name: librephotos-frontend
    restart: always
    tty: true
  backend:
    image: reallibrephotos/librephotos:dev
    # For development uncomment the "build" line below and comment the "image" line above
    # build: .
    container_name: librephotos-backend
    restart: always
    volumes:
      - $LIBREPHOTOS_PHOTOS:/data
      - $LIBREPHOTOS_MEDIA:/code/protected_media
      - $LIBREPHOTOS_LOGS/:/code/logs
      - $LIBREPHOTOS_CACHE:/root/.cache
    environment:
      - SECRET_KEY=$SECRET_KEY
      # This is backend host from within the service, you dont need to change this
      - BACKEND_HOST=backend
      - ADMIN_EMAIL=admin@example.com
      - ADMIN_USERNAME=admin
      # Change your admin password!
      - ADMIN_PASSWORD=$ADMIN_PASSWORD
      - DEBUG=true
      - DB_BACKEND=postgresql
      - DB_NAME=ownphotos
      - DB_USER=docker
      # This db password is internal, you can change it if you want, but also change it in librephotos-db container
      - DB_PASS=$DB_PASSWORD
      - DB_HOST=librephotos-db
      - DB_PORT=5432
      - REDIS_HOST=librephotos-redis
      - REDIS_PORT=6379
      # https://account.mapbox.com/auth/signup/
      - MAPBOX_API_KEY=$MAPBOX_API_KEY # CHANGE ME - You need this for reverse photo geocoding
      # https://docs.djangoproject.com/en/3.1/ref/settings/#std:setting-TIME_ZONE
      - TIME_ZONE=Europe/Paris
      # The number of Gunicorn worker processes: set it up to (2*cpu cores). Each worker needs 800MB of RAM
      - WEB_CONCURRENCY=4 # CHANGEME
      # Gunicorn worker timeout seconds (ensure that one bad request doesn't stall other requests forever)
      - WORKER_TIMEOUT=1800
    # Wait for Postgres
    depends_on:
      librephotos-db:
        condition: service_healthy
  librephotos-redis:
    image: redis:alpine
    container_name: librephotos-redis
    restart: always
